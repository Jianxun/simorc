"""Parametrized tests for sweep: {{ sweep_name }}"""
import csv
import subprocess
from pathlib import Path

import pytest


def load_test_cases():
    """Load test cases from metadata.csv - single source of truth."""
    metadata_path = Path(__file__).parent.parent / "metadata.csv"
    
    if not metadata_path.exists():
        pytest.fail(f"Metadata file not found: {metadata_path}")
    
    test_cases = []
    with open(metadata_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            case_id = row['case_id']
            # Extract parameter values (skip case_id, status, result_file)
            params = {k: v for k, v in row.items() 
                     if k not in ['case_id', 'status', 'result_file']}
            
            # Create tuple for parametrize: (case_id, param1, param2, ...)
            param_values = [params[param] for param in {{ param_names | list }}]
            test_cases.append(tuple([case_id] + param_values))
    
    return test_cases


@pytest.mark.parametrize(
    "case_id, {{ param_names | join(', ') }}",
    load_test_cases()
)
def test_simulation_case(case_id, {{ param_names | join(', ') }}):
    """Run simulation for a parameter combination."""
    # Parameters for this case (derived from metadata.csv)
    parameters = {
{%- for param in param_names %}
        "{{ param }}": {{ param }},
{%- endfor %}
    }
    
    # Get case directory
    case_dir = Path(__file__).parent.parent / f"case_{case_id}"
    netlist_path = case_dir / "netlist.spice"
    
    # Verify the netlist exists
    assert netlist_path.exists(), f"Netlist not found: {netlist_path}"
    assert netlist_path.stat().st_size > 0, f"Empty netlist: {netlist_path}"
    
    # Execute ngspice simulation
    print(f"Running simulation for case {case_id} with parameters: {parameters}")
    
    try:
        # Run ngspice with the netlist
        result = subprocess.run(
            ['ngspice', '-b', str(netlist_path)],
            capture_output=True,
            text=True,
            cwd=case_dir,
            timeout=60  # 60 second timeout
        )
        
        # Check for simulation success
        if result.returncode != 0:
            pytest.fail(f"ngspice failed for case {case_id}: {result.stderr}")
        
        # Verify output .raw file exists
        raw_file = case_dir / f"case_{case_id}_results.raw"
        if not raw_file.exists():
            pytest.fail(f"Raw file not created for case {case_id}: {raw_file}")
        
        # Verify raw file has content
        if raw_file.stat().st_size == 0:
            pytest.fail(f"Empty raw file for case {case_id}: {raw_file}")
        
        print(f"âœ… Simulation completed for case {case_id}")
        
        # TODO: Update metadata.csv status (will be implemented in Step 4)
        
    except subprocess.TimeoutExpired:
        pytest.fail(f"Simulation timeout for case {case_id}")
    except FileNotFoundError:
        pytest.fail("ngspice not found in PATH")
    except Exception as e:
        pytest.fail(f"Simulation error for case {case_id}: {e}")